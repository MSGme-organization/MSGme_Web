// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource MSGme {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         String    @id @default(uuid())
  username   String    @unique
  first_name String?
  last_name  String?
  email      String    @unique
  password   String
  dob        DateTime?
  bio        String?
  created_at DateTime  @default(now())
  avatar     String?
  updated_at DateTime  @default(now()) @updatedAt

  // friend request 
  friend_request_sent     Friend_request[] @relation("Sender")
  friend_request_received Friend_request[] @relation("Receiver")

  // friend list 
  user_friend    Friend_List[] @relation("User")
  to_friend_list Friend_List[] @relation("UserFriend")

  // reports
  reported_user Reports[] @relation("ReportedUser")
  reporter      Reports[] @relation("Reporter")

  // group_list
  group Group_List[]
}
// Define the enum
enum FriendRequestStatus {
  pending
  accepted
  rejected
}

model Friend_request {
  id          String   @id @default(uuid())
  sender_id   String
  receiver_id String
  status      FriendRequestStatus @default(pending)
  sender      User     @relation("Sender", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver    User     @relation("Receiver", fields: [receiver_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())

  @@index([sender_id])
  @@index([receiver_id])
}

model Friend_List {
  id         String   @id @default(uuid())
  user_id    String
  friend_id  String
  isBlocked  Boolean
  room_id    String
  created_at DateTime @default(now())

  room           Room @relation(fields: [room_id], references: [id], onDelete: Cascade)
  user           User @relation("User", fields: [user_id], references: [id], onDelete: Cascade)
  to_friend_list User @relation("UserFriend", fields: [friend_id], references: [id], onDelete: Cascade)

  @@index([room_id])
  @@index([user_id])
  @@index([friend_id])
}

model Room {
  id         String   @id @default(uuid())
  members     Int
  created_at DateTime @default(now())

  Friend_List Friend_List[]

  Group Group?
}

model Reports {
  id         String   @id @default(uuid())
  user_id    String
  repoter_id String
  reason     String
  created_at DateTime @default(now())

  user     User @relation("ReportedUser", fields: [user_id], references: [id], onDelete: Cascade)
  Reporter User @relation("Reporter", fields: [repoter_id], references: [id], onDelete: Cascade)
}

model Group {
  id          String   @id @default(uuid())
  room_id     String   @unique
  group_name  String
  group_image String
  created_at  DateTime @default(now())

  room       Room         @relation(fields: [room_id], references: [id], onDelete: Cascade)
  group_list Group_List[]

  @@index([room_id])
}

model Group_List {
  id        String  @id @default(uuid())
  user_id   String
  group_id  String
  isBlocked Boolean

  user  User  @relation(fields: [user_id], references: [id])
  group Group @relation(fields: [group_id], references: [id])

  @@index([user_id])
  @@index([group_id])
}
