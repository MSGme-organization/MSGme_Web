generator client {
  provider = "prisma-client-js"
}

datasource MSGme {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  firstName String?
  lastName  String?
  email     String    @unique
  password  String
  dob       DateTime?
  bio       String?
  publicKey Json?
  createdAt DateTime  @default(now())
  avatar    String?
  updatedAt DateTime  @default(now()) @updatedAt

  friendRequestSent     FriendRequest[] @relation("Sender")
  friendRequestReceived FriendRequest[] @relation("Receiver")

  userFriend   FriendList[] @relation("User")
  toFriendList FriendList[] @relation("UserFriend")

  reportedUser Report[] @relation("ReportedUser")
  reporter     Report[] @relation("Reporter")

  group GroupList[]
}

enum FriendRequestStatus {
  pending
  accepted
  rejected
}

model FriendRequest {
  id         String              @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(pending)
  sender     User                @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User                @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime            @default(now())

  @@unique([senderId, receiverId])
}

model FriendList {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  isBlocked Boolean  @default(false)
  roomId    String   @unique
  createdAt DateTime @default(now())

  room     Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User @relation("User", fields: [userId], references: [id], onDelete: Cascade)
  toFriend User @relation("UserFriend", fields: [friendId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
  @@index([friendId])
}

model Room {
  id               String      @id @default(uuid())
  members          Int
  lastMessage      String?
  lastMsgTimestamp DateTime?
  createdAt        DateTime    @default(now())
  isGroup          Boolean     @default(false)
  
  friendList       FriendList?
  group Group?
}

model Report {
  id         String   @id @default(uuid())
  userId     String
  reporterId String
  reason     String
  createdAt  DateTime @default(now())

  user     User @relation("ReportedUser", fields: [userId], references: [id], onDelete: Cascade)
  reporter User @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
}

model Group {
  id         String   @id @default(uuid())
  roomId     String   @unique
  groupName  String
  groupImage String
  createdAt  DateTime @default(now())

  room      Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  groupList GroupList[]

  @@index([roomId])
}

model GroupList {
  id        String  @id @default(uuid())
  userId    String
  groupId   String
  isBlocked Boolean @default(false)

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@index([userId])
  @@index([groupId])
}
